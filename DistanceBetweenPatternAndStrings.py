import numpy as np

def calculate_hamming_distance(string1, string2):
    hamming_dist = 0
    try:
        for i in range(0,len(string1)):
           if string1[i] != string2[i]:
              hamming_dist +=1
        return hamming_dist
    except:
       print('String1 and string2 do not have the same lenght')

def distanceBetweenPatternAndStrings(pattern,dna_array):
    k = len(pattern)
    min_hd_motif_array = []
    for dna_string in dna_array:
        temp_kmer_hd = []
        for i in range(0,len(dna_string)-k+1):
            temp_kmer_hd.append(calculate_hamming_distance(dna_string[i:i+k],pattern))
        min_hd_motif_array.append(min(temp_kmer_hd))

    return np.sum(min_hd_motif_array)

sequence = 'AGCTAAGCCTACTTGGCTCGCACACCCTCCTACCATGCGCGTCAGTCGTACTTCGCATCAGTCTGTATTCTGCGGACCCCTGAAAACTTAAGGCAC TAGCGAAACTTGTATGGAGTAAAACGCTACCCTAGGTGTTGAGTCCGTGGTCAAGTCGGCTCTGTAACGTTTCAGAATAGGGTAAGATTGGATCAT CAACCCACTTTATATCGCCAGACTGCTCTGTGTACATTTCGTTGTAGTACTGTAGTACGGTGTTCTCCCTTATTCAAGAAGTAAACAGCAAGGCTG GCCGTGAACGCGTCGGTTCGGTGTATGCATACCACCTTATGACAGAGCTCCTTGCGTGCTCTGTACCATAGCCCTCGCGCTTTCACTACGCAAGGG CCCCACGACTATCATTAAAGAGCAGAGTCAGCACGGACGCAGATGGTGCTCGCTATTTGGACCTTTACGAGCCTCAGGTTTCGGGATCAGGCCTAT CAAGCCTAATTGATTGACCCTCCCCCGGTCGCAAAAGCCGTGCTTTTCGATTTCACCAGGAACGCGGGCTGATGAGTTCTGCGCAGCGCTACGAGT TCCTTCCCGTATTTCAACAACGGTAATCTTTTCTTTAGAAAGGGTAGCTCAAGTCCATCCTGGATATTAACATCACCAGCGCCATAATTCGCTGGT TACTCAAGCACTAGAAGGATTAAACTAATCCCTCTTCATTGATTGAAAAACACCTCTAGAGGAAATAAGTTCTCGACTCGACTGATATACCGGGGT AGCCACGTGACTTTGCCTGGGAACCAAATCTGGGCGATATGAGAACATGTTCCCGTAGATTGTATCGCGGTGGTTACCGGGTGCGCGCTTACGTTC ACGAAGTACAACATGGATACAAACGTGCATTACCTTGTCCTTGATTCCGCGGGGCTTGGCGACCTTCCTAATGGTCTTGAGACTACTATTCATTCG AAGGCACGATATAGTCCACTGACCCCAATTGCGAATCAGTACTTCATATGGGGAGACATCCTAGGATTGTAATAATGAATCGTAATGCAAGGCTGT AGGAGTTAATACCTGCGTCGCCCTTCTAGACTTGATCAAGGGCAAATCGTCATTGAACGCAATTACCATTATCAGTAGCGTACGCGGTGCCAGGCC ACAGTGTCTTCTTGGAAGCTAGATCTTCATATACATCACGAACCTAGTTCCGACGTCCCGTAAGAACATAGATCCGATTTCACGGACAGCTGTACC TCGTGCTTCTCGATTAAGGATGGTGGATAGTGGTATACTTAGGACCTGTGTTGAACTGATTACTCAGCTCCATTATGTGCACGATGATGATCACAC ATGAATTACTTCTCAACTTCGAGTATGCCGTGTACCATGCACGTGCACCCGTACTCTCGGTAATAATGGTCGATTTACTCATAGAGTAACAACGCC GGACAGAAGCGGACAAGACGGGGCATGGCGTTATGGCCTTACCCACGCGATATCATTATACGGGTCGGTGCCTTCTCCGCGTGAACTAGTTCGCGG CATTTGGATCTGAGTGACCTTTTGGATAGTTGAGGCGGTGGATACGCCCACAAGGAGACGTGGTGTGGGCCTTCAGAGATCCCGCATATCGGTTGT ATACCGAATTGCCCAGGAATCCCTAGTCGTAATGGGTGAGAGATGGGCATTGTGTACATGAGGGACCTATTGACCACCGACACTTGCGGGAAGGAG GATATATTGTCGCCCCCCCGAACTGCAAGGCATTAAGAGGCTGAATCCCGCTGTTTTGCATGGCCCTAATACTCCTTAAGAGTCCTGCCTATTAGT GTGTTTACAGCGCATCACAAAATTCGTGATGAACCCGTAACTATAGACCATGGGCTCGCAACGGCCTACACGCAAAGGATTCTTCACGACACCGCC GAAGTTTCCGGACCGGACTGAACTGTGGAAAATTTTCTCTGTCATCGTTCCTTCATTACATAGCACGACATGCACACGTAGTCAATAACTTCGTGT TGTTATAGCTCGCACTCATATCGTCGATTTGCACTAGAGAGGGCCATCTGGACGATAAGCCCAGCTTTAACCATGCGCTGGCGGATGGATAACCAT GACATACCAGTCAGATCCCTGTTTACTTAGCACAGGCTTATGGACGTCAGTATCTTAAGAACACTTGTACATAACTGGGCGTCCGCCGTAAGAGGT GTCCGCCTTCCTTATGTGTGCTTGAGTAAAGACAATACCTAGGATTGTGCAGGGGATTAAGCAAAACAGTACTTCATGTCCGGTTACTACTCGCTC TCTGGCCCGCAAAACCATAGGGGTACCGGGGGCCCTCTGGCAATGCCAGCTCGAGCCACAGATTGACGTCAGAACCATACACCTAAATTAATAGAT CAAATCCGCTTACTGCTCGTATTCCGGGAGCCCTTTGGCCACTCGGACCTTATATGGGCTCCGGAACCTAAAGATTAGTTATTTCTGGCCGTGAGG GTCTTTACAGCCTCGGTATAATCGTGGTAAATGCTAGAATAGCCTTAGCGAACTTTACCCTAACTTACCATGACCTGCGATCACGTAATATCGTAT GATTCTTTTCCGGCCCATGTGACCTCAGACGGGGCTAAGTCATCGGATTTAACCGTGCTGTCTAAAGCACGCGACATACACCTTTCATCTTACGAG ACTCAACACAATTCATCGAGCGACTCGGGATTTGCGTCATCATTCCCTATCGGGATACTAAGATAGAGCTAGCCTAACGCGGTTATCACGCCCGCG CTTATTAGTAGTGCGCATTTAGGGAGCATTGGTATACTACCGACGGAGGAAAAGAGCACCGTATACCCGGGTAATTACCAGCGGATACCCGCTTAA GGAACCACGCAACTTCCGTTAAGTAGGGCATAGTTGGATCACTGTCGGGGAATTTATGCATACAGGAGATTGAGCGAGGTTGGCCTGATCTGCATC CCGTATTGGGTTCCGCCGCGGTGGATCGGTTCGATCTGCCAAATAGCGCAGCAGACTCCGTAGCTAAGGGACCCTGAGAAGAGATTTAATCACCCG GCGGATTACGCCCGCACGACAATTCGACGGTGGAGACCTCGGTCGGCGACCCACACTGTGCCTTGTTCAATTAGTGCGCGGCACAGGTCACATTCT AGCATCAGACCCGACGCATACTAAGTCGATTTTAATTATCAACGTTGCCTACGAGGGATGACCTCATGCTGTTTTGCTAACACAGGAGCGCGCCCG GACCGTAGTGCGAGTCGCGATAGGTAGAAGCCATCGGTCATTATATACGAATAACGAGAGTGCTAACTAGCCGTTAGCCTAACCTGTTACACCTAT CCTGGGTTTTGCCCACGACGCTAGAGGGTGTACCAATGTTATGTTCGAAACAATACCATTGGTACCATGGAGGCCCGCAGCAGTCATGAGATGAAA GATGACGGGATTACCGCCGAGTCAGGCAGCCTCCCATTCATCTCGGGGACAATTCGCGAAGCCGACATTTGCCTGAAAGGGGACCCCAGGCATTGA'
sequence = sequence.split(' ')
pattern = 'ACGTTG'

print(distanceBetweenPatternAndStrings(pattern=pattern,dna_array=sequence))